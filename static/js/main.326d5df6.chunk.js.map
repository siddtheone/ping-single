{"version":3,"sources":["images/logo.svg","images/illustration-dashboard.png","components/Logo/index.js","components/Dashboard/index.js","components/StyledComp/index.js","store/index.js","components/FormField/index.js","reducer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","LogoImg","alt","Dashboard","DashboardImg","GlobalStyles","createGlobalStyle","Heading","styled","h1","Paragraph","p","error","Row","div","StyledInput","input","StyledButton","button","StyledFormField","Footer","footer","AppContext","React","createContext","Provider","Consumer","FormField","useContext","email","submitted","dispatch","isValid","test","value","onChange","target","type","payload","name","aria-label","placeholder","initialState","reducer","state","App","useReducer","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oD,qKCG5B,SAASC,IACpB,OACI,gCACI,yBAAKC,IAAKC,IAASC,IAAI,U,qBCHpB,SAASC,IACpB,OACI,6BACI,yBAAKH,IAAKI,IAAcF,IAAI,mB,k1FCJxC,IAAMG,EAAeC,YAAH,KA+BZC,EAAUC,IAAOC,GAAV,KAUPC,EAAYF,IAAOG,EAAV,KACF,qBAAEC,MAAiB,uCACd,qBAAEA,MAAoB,SAAW,UAClC,qBAAEA,MAAoB,QAAU,aAE3B,qBAAEA,MAAoB,OAAS,aAC7B,qBAAEA,MAAoB,MAAQ,aAIhDC,EAAML,IAAOM,IAAV,KASHC,EAAcP,IAAOQ,MAAV,KAEO,qBAAEJ,MAAiB,wCAK7B,qBAAEA,MAAiB,uCAG3BK,EAAeT,IAAOU,OAAV,KAuBZC,EAAkBX,IAAOM,IAAV,KAQfM,EAASZ,IAAOa,OAAV,KCrGNC,EAAaC,IAAMC,cAAc,IAE1BC,GADWH,EAAWI,SACXJ,EAAWG,UAEpBH,ICFA,SAASK,IAAa,IAAD,EACOJ,IAAMK,WAAWN,GADxB,0BACxBO,EADwB,EACxBA,MAAOC,EADiB,EACjBA,UAAYC,EADK,KAKhC,IACMC,EADa,yHACQC,KAAKJ,GAEhC,OACI,kBAACV,EAAD,KACI,kBAACJ,EAAD,CACIH,MAAOkB,IAAcE,EACrBE,MAAOL,EACPM,SAXZ,YAAsC,IAAVD,EAAS,EAAlBE,OAASF,MACxBH,EAAS,CAACM,KAAM,SAAUC,QAAS,CAACC,KAAM,QAASL,YAW3CM,aAAW,QACXC,YAAY,uBAEfX,IAAcE,GAAW,kBAACtB,EAAD,CAAWE,OAAK,GAAhB,yC,kBCrBzB8B,EAAe,CACxBb,MAAO,GACPC,WAAW,GAGA,SAASa,EAAQC,EAAjB,GAA0C,IAAjBP,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAC1C,OAAQD,GACJ,IAAK,SAAL,IACWE,EAAeD,EAAfC,KAAML,EAASI,EAATJ,MACb,OAAO,2BACAU,GADP,kBAEKL,EAAOL,IAEhB,IAAK,QACD,OAAO,eAAIQ,GACf,QACI,OAAOE,GC4BJC,MA9Bf,WAAgB,IAAD,EACatB,IAAMuB,WAAWH,EAASD,GADvC,mBACNE,EADM,KACCb,EADD,KAOb,OACE,kBAACN,EAAD,CAAUS,MAAO,CAACU,EAAOb,IACvB,0BAAMgB,UAAU,kBACd,kBAAC1C,EAAD,MACA,kBAACN,EAAD,MACA,kBAACQ,EAAD,yBAA0B,0CAC1B,kBAACG,EAAD,mCACA,kBAACG,EAAD,KACE,kBAACc,EAAD,MACA,kBAACV,EAAD,CAAc+B,QAbtB,WACEjB,EAAS,CAACM,KAAM,SAAUC,QAAS,CAACC,KAAM,YAAaL,OAAO,OAYxD,cAEF,kBAAC/B,EAAD,MACA,kBAACiB,EAAD,KACE,4BAAQoB,aAAW,YAAW,8BAAUD,KAAK,mBAC7C,4BAAQC,aAAW,WAAU,8BAAUD,KAAK,kBAC5C,4BAAQC,aAAW,aAAY,8BAAUD,KAAK,qBAEhD,2EC1BYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,c","file":"static/js/main.326d5df6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e392d534.svg\";","module.exports = __webpack_public_path__ + \"static/media/illustration-dashboard.92dd5c8f.png\";","import React from 'react';\r\nimport LogoImg from '../../images/logo.svg';\r\n\r\nexport default function Logo() {\r\n    return (\r\n        <header>\r\n            <img src={LogoImg} alt=\"Ping\"/>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport DashboardImg from '../../images/illustration-dashboard.png';\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <div>\r\n            <img src={DashboardImg} alt=\"Ping dashbord\"/>\r\n        </div>\r\n    )\r\n}","import styled, {createGlobalStyle} from 'styled-components';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n:root {\r\n    --blue: hsl(223, 87%, 63%);\r\n    --lightblue: hsl(223, 100%, 88%);\r\n    --lightred: hsl(354, 100%, 66%);\r\n    --gray: hsl(0, 0%, 59%);\r\n    --darkblue: hsl(209, 33%, 12%);\r\n}\r\n\r\n*, *::before, *::after {\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: 'Libre Franklin', sans-serif;\r\n    font-size: 20px;\r\n    padding-top: 80px;\r\n    color: var(--gray);\r\n}\r\n\r\nimg {\r\n    max-width: 100%;\r\n}\r\n\r\n.app__container {\r\n    width: min(650px, 90%);\r\n    margin: 0 auto;\r\n    text-align: center;\r\n}\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n    font-weight: normal;\r\n    font-size: 2.83rem;\r\n    margin: 0;\r\n    margin-top: .9em;\r\n    strong {\r\n        color: var(--darkblue);\r\n    }\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n    color: ${({error}) =>  error ? `var(--lightred)` : `var(--darkblue)`};\r\n    font-style: ${({error}) =>  error ? 'italic' : 'none'};\r\n    font-size: ${({error}) =>  error ? '.8rem' : 'inherit'};\r\n    @media (min-width: 600px) {\r\n        text-align: ${({error}) =>  error ? 'left' : 'inherit'};\r\n        padding-left: ${({error}) =>  error ? '2em' : 'inherit'};\r\n    }\r\n`;\r\n\r\nconst Row = styled.div`\r\n    padding: 0  1.5em;\r\n    margin: 1.5em 0;\r\n    @media (min-width: 600px) {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    padding: 1.5em 2em;\r\n    border: 1px solid ${({error}) =>  error ? `var(--lightred)` : `var(--lightblue)`};\r\n    border-radius: 100px;\r\n    width: 100%;\r\n    outline: none;\r\n    transition: 0.5s;\r\n    color:  ${({error}) =>  error ? `var(--lightred)` : `var(--darkblue)`};\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    padding: 1.5em 1em;\r\n    background: var(--blue);\r\n    color: white;\r\n    border-radius: 100px;\r\n    width: 100%;\r\n    outline: none;\r\n    border: 0;\r\n    transition: all 0.5s;\r\n    font-weight: bold;\r\n    box-shadow: 0px 1px 10px rgba(0, 0, 0, 0.3);\r\n    margin-bottom: 20px;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        background: var(--darkblue);\r\n    }\r\n    @media (min-width: 600px) {\r\n        width: 30%;\r\n        align-self: flex-start;\r\n    }\r\n`;\r\n\r\nconst StyledFormField = styled.div`\r\n    margin-bottom: 20px;\r\n    @media (min-width: 600px) {\r\n        margin-right: min(1%, 1em);\r\n        width: 65%;\r\n    }\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 5em 0 1em;\r\n\r\n    button {\r\n        border: 0;\r\n        outline: none;\r\n        border: 1px solid var(--lightblue);\r\n        border-radius: 100%;\r\n        padding: 0.5em;\r\n        background: white;\r\n        font-size: 1.5rem;\r\n        color: var(--blue);\r\n        line-height: 0;\r\n        transition: all .5s;\r\n        cursor: pointer;\r\n        &:hover {\r\n            color: white;\r\n            background: var(--blue);\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n\r\n    button + button {\r\n        margin-left: 10px;\r\n    }\r\n`;\r\n\r\nexport {\r\n    Footer,\r\n    StyledFormField,\r\n    StyledButton,\r\n    StyledInput,\r\n    Row,\r\n    Paragraph,\r\n    Heading,\r\n    GlobalStyles,\r\n}","import React from 'react';\r\n\r\nconst AppContext = React.createContext({});\r\nexport const Consumer = AppContext.Consumer;\r\nexport const Provider = AppContext.Provider;\r\n\r\nexport default AppContext;","import React from 'react';\r\nimport AppContext from '../../store';\r\nimport {StyledFormField, StyledInput, Paragraph} from '../StyledComp';\r\n\r\nexport default function FormField() {\r\n    const [{email, submitted}, dispatch] = React.useContext(AppContext);\r\n    function onChange({target: {value}}) {\r\n        dispatch({type: 'change', payload: {name: 'email', value}});\r\n    }\r\n    const emailRegEx = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n    const isValid = emailRegEx.test(email);\r\n    \r\n    return (\r\n        <StyledFormField>\r\n            <StyledInput\r\n                error={submitted && !isValid}\r\n                value={email}\r\n                onChange={onChange}\r\n                aria-label=\"email\"\r\n                placeholder=\"Please enter email\"\r\n            />\r\n            {submitted && !isValid && <Paragraph error>Please provide a valid email address</Paragraph>}\r\n        </StyledFormField>\r\n    )\r\n}","export const initialState = {\r\n    email: '',\r\n    submitted: false,\r\n};\r\n\r\nexport default function reducer(state, {type, payload}) {\r\n    switch (type) {\r\n        case 'change':\r\n            const {name, value} = payload;\r\n            return {\r\n                ...state,\r\n                [name]: value,\r\n            }\r\n        case 'reset':\r\n            return {...initialState};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport Logo from './components/Logo';\nimport Dashboard from './components/Dashboard';\nimport {\n  GlobalStyles,\n  Heading,\n  Paragraph,\n  Row, StyledButton,\n  Footer\n} from './components/StyledComp';\nimport FormField from './components/FormField';\nimport {Provider} from './store';\nimport reducer, {initialState} from './reducer';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  \n  function onSubmit() {\n    dispatch({type: 'change', payload: {name: 'submitted', value: true}});\n  }\n\n  return (\n    <Provider value={[state, dispatch]}>\n      <main className=\"app__container\">\n        <GlobalStyles />\n        <Logo />\n        <Heading>We are launching <strong>soon!</strong></Heading>\n        <Paragraph>Subscribe and get notified</Paragraph>\n        <Row>\n          <FormField />\n          <StyledButton onClick={onSubmit}>Notify Me</StyledButton>\n        </Row>\n        <Dashboard />\n        <Footer>\n          <button aria-label=\"facebook\"><ion-icon name=\"logo-facebook\"></ion-icon></button>\n          <button aria-label=\"twitter\"><ion-icon name=\"logo-twitter\"></ion-icon></button>\n          <button aria-label=\"instagram\"><ion-icon name=\"logo-instagram\"></ion-icon></button>\n        </Footer>\n        <p>&copy; Copyright Ping. All rights reserved.</p>\n      </main>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}